#!/bin/bash

function cws(){
	local workspace_root="${HOME}/workspace"
	local workspace_name=""
	local workspace_file=".workspace"
	local repo=""

	if [[ $1 == [cC]reate ]] && [[ $2 == "--name" ]]; then 
		printf "[DEBUG] Passed in 'Create --name' command and flag\n"
		shift;shfit;
		workspace_name=$1
		if [[ -z ${workspace_root} ]]; then
			printf "[ERROR] No workspace name provided\n"
			return 1
		fi
		if [[ -d ${workspace_root}/${workspace_name} ]] && [[ -f ${workspace_root}/${workspace_name}/${workspace_file} ]]; then
			printf "[INFO] The workspace, %s, already exists\n" ${workspace_name}
			cd ${workspace_root}
		else
			printf "[INFO] Creating the workspace directory...\n"
			mkdir -p ${workspace_root} && cd ${workspace_root} && touch .workspace
			if [[ $? -ne 0 ]]; then
				printf "[ERROR] Issue with creating the workspace directory. Try again or double check the name\n"
				return 2
			fi
			printf "[INFO] Successfully created the workspace directory\n"
			cd "${workspace_root}" && ls -1
		fi
	elif [[ $1 == [dD]elete ]] && [[ $2 == "--name" ]]; then
		printf "[DEBUG] Passed in 'Delete' command\n"
		shift
		repo=$2
		if [[ -z ${repo} ]]; then
			printf "[ERROR] No repo name provided\n"
			return 1
		fi

		cd ${workspace_root}

		if [[ -d ${repo} ]]; then
			printf "[INFO] Deleting the workspace directory for the pkg/repo...\n"
			rm -rf -- "${repo}"
			if [[ $? -ne 0 ]]; then
				printf "[ERROR] Issue with deleting the pkg/repo. Try again or double check the name\n"
				return 2
			fi
			printf "[INFO] Successfully deleted the pkg/repo\n"
			cd "${workspace_root}" && ls -1
			return
		else
			printf "[WARN] The workspace directory for the pkg/repo does not exist...\n"
			return 1
		fi
	elif [[ $1 ==  [lL]ist ]] && [[ -d ${workspace_root} ]]; then
		printf "[DEBUG] Passed in the 'List'\n"
		cd "${workspace_root}" && ls -1
		return
	elif [[ $1 == [lL]ist ]]; then
		printf "[INFO] Workspace dir is missing... creating it\n"
		mkdir -p ${workspace_root} && cd ${workspace_root} && ls -1
		return
	elif [[ $1 == [cC]reate ]] || [[ $1 == [dD]elete ]]; then
		printf "[ERROR] Missing parameter: %s\n" ${2}
		return 1
	elif [[ -z $1 ]]; then
		# default to list
		cd && ls -1 "${workspace_root}"
		return
	else
		printf "[ERROR] Unsupported option or missing parameter: %s\n" ${1} ${2}
		return 1
	fi

	if [[ -z ${repo} ]]; then
		printf "[ERROR] No repo name provided\n"
		return 1
	fi

	if [[ -d ${repo} ]] && [[ -f ${repo}/.workspace ]]; then
		printf "[INFO] The workspace directory already exists\n"
		cd ${repo}
	else
		printf "[INFO] Creating the workspace for the pkg/repo...\n"
		mkdir -p ${workspace_root}/${repo} && cd ${workspace_root}/${repo} && touch .workspace
	fi

	if command -v gh &>/dev/null && gh auth status &>/dev/null; then
		echo "[INFO] Authenticated with GitHub — using SSH clone"
		CLONE_URL="git@github.com:Sending-Grounds/${repo}.git"
	else
		echo "[WARN] Not authenticated — using HTTPS (public repos only)"
		CLONE_URL="https://github.com/Sending-Grounds/${repo}.git"
	fi

	echo "[INFO] Checking repo access for ${CLONE_URL}"
	export GIT_TERMINAL_PROMPT=0 # set to avoid prompting for username/password. We WANT to ignore and only confirm public repos

	if ! git ls-remote "${CLONE_URL}" &>/dev/null; then
		echo "[ERROR] Repo not accessible or doesn't exist: $repo"
		return 2
	fi

	printf "[DEBUG] Attempting to pull down the repo (cloning it)\n"
	git clone https://github.com/Sending-Grounds/${repo}.git
	if [[ $? -ne 0 ]]; then
		printf "[ERROR] Issue with pulling down the pkg/repo. Try again or double check the name\n"
		return 2
	else
		printf "[INFO] Successfully pulled down the pkg/repo\n"
		cd "${repo}" || {
  			printf "[WARN] Couldn't enter repo directory after clone\n"
  			return 3
		}
	fi
}

cws "$@"
